import datetime
import math
import os
import sys
import time
from math import atan2, ceil, cos, sin

import cv2
import keyboard
import numpy
import pyautogui
import win32api
import win32con
from PIL import Image

from constants import constants


def orientation(p1: tuple, p2: tuple, p3: tuple):
	val = (float(-p2[1] + p1[1]) * (p3[0] - p2[0])) - (float(p2[0] - p1[0]) * (-p3[1] + p2[1]))
	if val > 0: return 1 #   cw
	elif val < 0: return 2 # ccw
	else: return 0 #         col

def on_segment(start: tuple, end: tuple, point: tuple):
	if point[0] <= max(start[0], end[0]) and point[0] >= min(start[0], end[0]) and point[1] <= max(start[1], end[1]) and point[1] >= min(start[1], end[1]): return True
	else: return False

def lines_intersect(s1: tuple, e1: tuple, s2: tuple, e2: tuple):
	slope_1 = (e1[1] - s1[1]) / (e1[0] - s1[0])
	if slope_1 == 0:
		if s1[1] == s2[1]: return False # Don't include start point
	else:
		intercept_1 = s1[1] / (slope_1 * s1[0])
		y_check = slope_1 * s2[0] + intercept_1
		if y_check == s1[1]: return False # Don't include start point
	o1 = orientation(s1, e1, s2)
	o2 = orientation(s1, e1, e2)
	o3 = orientation(s2, e2, s1)
	o4 = orientation(s2, e2, e1)
	if o1 != o2 and o3 != o4: return True
	elif o1 == 0 and on_segment(s1, e1, s2): return True
	elif o2 == 0 and on_segment(s1, e1, e2): return True
	elif o3 == 0 and on_segment(s2, e2, s1): return True
	elif o4 == 0 and on_segment(s2, e2, e1): return True
	else: return False

def point_in_contour(point: tuple, contour: list):
	end_point = (10000 + constants.video_resolution[0], point[1] + 1)
	intersect_counter = 0
	for i in range(len(contour)):
		start = tuple(contour[i][0])
		k = (i + 1) % len(contour)
		end = tuple(contour[k][0])
		if lines_intersect(point, end_point, start, end):
			if orientation(start, point, end) == 0:
				if on_segment(start, end, point): return True
			intersect_counter += 1
	return intersect_counter % 2 != 0

square = [[[10, 10]], [[20, 10]], [[20, 20]], [[10, 20]]]
annoying_shape = [[[756, 663]], [[755, 664]], [[757, 666]], [[757, 668]], [[758, 669]], [[758, 670]], [[759, 671]], [[759, 672]], [[762, 675]], [[762, 676]], [[767, 681]], [[768, 681]], [[771, 684]], [[772, 684]], [[774, 686]], [[775, 686]], [[776, 687]], [[777, 687]], [[778, 686]], [[779, 686]], [[779, 682]], [[778, 681]], [[778, 680]], [[777, 679]], [[777, 678]], [[775, 676]], [[775, 675]], [[771, 
671]], [[771, 670]], [[770, 669]], [[769, 669]], [[768, 668]], [[767, 668]], [[764, 665]], [[762, 665]], [[761, 664]], [[757, 664]]]
annoying_shape_part_2 = [[[611, 654]], [[610, 655]], [[609, 655]], [[608, 656]], [[608, 659]], [[609, 660]], [[609, 661]], [[611, 663]], [[623, 663]], [[625, 661]], [[626, 661]], [[628, 659]], [[628, 658]], [[627, 657]], [[626, 657]], [[624, 655]], [[622, 655]], [[621, 654]]]
point = (614, 658)
annoying_shape_part_3 = [[[644, 562]], [[643, 563]], [[640, 563]], [[640, 565]], [[639, 566]], [[639, 567]], [[638, 568]], [[638, 569]], [[637, 570]], [[637, 572]], [[639, 574]], [[641, 574]], [[642, 575]], [[644, 575]], [[645, 574]], [[647, 574]], [[648, 573]], [[648, 571]], [[647, 570]], [[647, 569]], [[645, 567]], [[645, 564]], [[644, 563]]]
annoying = [[[484, 223]], [[485, 224]], [[485, 235]], [[484, 236]], [[484, 249]], [[483, 250]], [[483, 258]], [[482, 259]], [[481, 258]], [[481, 256]], [[480, 255]], [[480, 248]], [[479, 247]], [[479, 242]], [[478, 241]], [[478, 230]], [[479, 229]], [[479, 228]]]
absolutely_annoying = [[[586, 539]], [[584, 541]], [[585, 542]], [[585, 543]], [[586, 544]], [[586, 548]], [[587, 549]], [[587, 550]], [[588, 551]], [[588, 552]], [[589, 553]], [[589, 556]], [[590, 557]], [[590, 559]], [[591, 560]], [[591, 564]], [[592, 565]], [[592, 568]], [[593, 569]], [[593, 572]], [[594, 573]], [[594, 574]], [[595, 575]], [[595, 578]], [[596, 579]], [[596, 582]], [[597, 583]], [[597, 586]], [[598, 


annoying_ellipse = [[[439, 289]], [[438, 290]], [[430, 290]], [[429, 291]], [[423, 291]], [[422, 292]], [[418, 292]], [[417, 293]], [[413, 293]], [[412, 294]], [[409, 294]], [[408, 295]], [[405, 295]], [[404, 296]], [[401, 296]], [[400, 297]], [[398, 297]], [[397, 298]], [[395, 298]], [[394, 299]], [[392, 299]], [[391, 300]], [[390, 300]], [[389, 301]], [[387, 301]], [[386, 302]], [[385, 302]], [[384, 303]], [[383, 


398]], [[576, 397]], [[576, 395]], [[577, 394]], [[577, 390]], [[578, 389]], [[578, 385]], [[579, 384]], [[579, 370]], [[578, 369]], [[578, 365]], [[577, 364]], [[577, 360]], [[576, 359]], [[576, 357]], [[575, 356]], [[575, 355]], [[574, 354]], [[574, 352]], [[573, 351]], [[573, 350]], [[572, 349]], [[572, 348]], [[571, 347]], [[571, 346]], [[570, 345]], [[570, 344]], [[569, 343]], [[569, 342]], [[567, 340]], [[567, 339]], [[564, 336]], [[564, 335]], [[559, 330]], [[559, 329]], [[555, 325]], [[554, 325]], [[548, 319]], [[547, 319]], [[544, 316]], [[543, 316]], [[540, 313]], [[539, 313]], [[538, 312]], [[537, 312]], [[535, 310]], [[534, 310]], [[533, 309]], [[532, 309]], [[531, 308]], [[530, 308]], [[529, 307]], [[528, 307]], [[527, 306]], [[526, 306]], [[525, 305]], [[524, 305]], [[523, 304]], [[522, 304]], [[521, 303]], [[520, 303]], [[519, 302]], [[518, 302]], [[517, 301]], [[515, 301]], [[514, 300]], [[513, 300]], [[512, 299]], [[510, 299]], [[509, 298]], [[507, 298]], [[506, 297]], [[504, 297]], [[503, 296]], [[500, 296]], [[499, 295]], [[496, 295]], [[495, 294]], [[492, 294]], [[491, 293]], [[488, 293]], [[487, 292]], [[482, 292]], [[481, 291]], [[475, 291]], [[474, 290]], [[466, 290]], [[465, 289]]]
sussy_rect = [[[416, 507]], [[416, 560]], [[568, 560]], [[568, 507]]]
# 394 62, 389 62
# print(len(bitchy_shape_part_2))
# print(on_segment(tuple(bitchy_shape[757][0]), tuple(bitchy_shape[758][0]), point))
# print(lines_intersect(point, (-1, -1), (10, 10), (20, 10)))
# print(orientation(point, (-1, -1), (10, 10)))
# print(f'orientation: {orientation(tuple(sussy_rect[0][0]), tuple(sussy_rect[1][0]), tuple(sussy_rect[2][0]))}')
# print(f'orientation: {orientation((), tuple(absolutely_annoying[1][0]), tuple(absolutely_annoying[2][0]))}')
i = 0
perp_off = -math.pi / 2
pt1 = tuple(sussy_rect[i][0])
pt2 = tuple(sussy_rect[(i + 1) % len(sussy_rect)][0])
ang = atan2(-(pt2[1] - pt1[1]), pt2[0] - pt1[0])
perp_ang = ang + perp_off
# if perp_ang < 0:
# 	perp_ang += math.pi * 2
x_off = ceil(constants.brush_size_offset / 2) * cos(perp_ang)
y_off = -ceil(constants.brush_size_offset / 2) * sin(perp_ang)
midpoint = ((pt1[0] + pt2[0]) / 2, (pt1[1] + pt2[1]) / 2)
check_point = (round(midpoint[0] + x_off), round(midpoint[1] + y_off))
# print(ang * 180 / math.pi)
# print(perp_ang * 180 / math.pi)
# print(x_off)
# print(y_off)
print(pt1)
print(pt2)
print(check_point)
print(point_in_contour(check_point, sussy_rect))


frame_folder_path = os.getcwd()[:os.getcwd().rfind('\\')] + '\\frame-sequence\\'
frame = 1546
mat = cv2.imread(frame_folder_path + f'{frame:04}.png', 0)
ret, mat = cv2.threshold(mat, 100, 255, 0)
if not ret:
	print('Error: Threshold failed')
	sys.exit()
print(mat[check_point[1]][check_point[0]])
